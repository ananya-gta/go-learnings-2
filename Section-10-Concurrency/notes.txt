>> Goroutines enable concurrent execution of functions. Goroutines allow you to run multiple tasks simultaneously.
>> Goroutines are much lighter than traditional threads. 
   You can create thousands of goroutines in a single program without significant overhead.
>> To create a goroutine, you simply prefix a function call with the go keyword.\

>> func main() {
      go greet("Nice to meet you!")
      go greet("How are you?")
      go slowGreet("How ... are ... you ...?")
      go greet("I hope you're liking the course!")
   }

   For the above code nothing will be printed because  after starting all the goroutines, 
   the main goroutine (the one executing main()) finishes and exits quickly. 
   When the main goroutine exits, it terminates the entire program, 
   which means the program does not wait long enough for the other goroutines to finish.

   ---------------------------------------------------------------------------------------------------------------------------------------
   To fix above problem, we use go channels, but there is an alternative also 
   (sync.WaitGroup)

   >> func main() {
         var wg sync.WaitGroup

         // Increment the counter for each goroutine you start
         wg.Add(4)

         // Start the goroutines
         go func() {
            defer wg.Done() // Decrement the counter when the goroutine completes
            greet("Nice to meet you!")
         }()
         go func() {
            defer wg.Done()
            greet("How are you?")
         }()
         go func() {
            defer wg.Done()
            slowGreet("How ... are ... you ...?")
         }()
         go func() {
            defer wg.Done()
            greet("I hope you're liking the course!")
         }()

         // Wait for all goroutines to finish
         wg.Wait()
      }


------------------------------------------------------------------------------------------------------------------------------------------
>> In Go, channels are a powerful feature used for communication between goroutines.
>> Channels help you coordinate and pass data between goroutines, making it easier to write concurrent programs. 
   You can think of a channel as a pipe through which data flows: one goroutine sends data through the channel, 
   and another goroutine receives that data.

>> Channels are created using the make function: 
   // Create a channel that will carry int values
   ch := make(chan int)  

   // Sending data into the channel
   ch <- 42   // Send 42 into the channel

   // Receiving data from the channel
   value := <-ch   
   // Receive data from the channel and store it in 'value'

---------------------------------------------------------------
  
  // This function can only send data into the channel
   func sendData(ch chan<- int) {
      ch <- 42
   }

   // This function can only receive data from the channel
   func receiveData(ch <-chan int) int {
      return <-ch
   }


// Close the channel
>> close(ch)  

--------------------------------------------------------------

The select statement allows a goroutine to wait on multiple channel operations. 
It blocks until one of the channels can proceed (i.e., until one of the operations on channels can be executed).
It will not wait for other channels.


   select {
   case msg1 := <-ch1:
      fmt.Println("Received from channel 1:", msg1)
   case msg2 := <-ch2:
      fmt.Println("Received from channel 2:", msg2)
   case <-time.After(time.Second): // Timeout if nothing happens in 1 second
      fmt.Println("Timed out")
   }


