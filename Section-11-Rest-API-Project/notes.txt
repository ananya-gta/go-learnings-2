>> API --> To exchange data between client and the server, we create endpoints (HTTP method + URL cmbination) 
through which HTTP requests are snet in JSON format.

>> In Gin, a context (*gin.Context) is an object that holds information about an HTTP request 
and provides methods to interact with the request, response, and other parts of the request-handling process.

Here's a simple explanation of what a context is and what it does:

1. Request Information: It contains data about the incoming HTTP request (like URL, headers, query parameters, etc.).
2. Response Handling: It provides methods to send responses back to the client, such as JSON(), HTML(), String(), etc.
3. Middleware Handling: It helps manage the flow of data through the middleware and request handlers.
4. Managing Data: You can use it to store and retrieve values during the lifecycle of the request, such as session data, request-specific variables, etc.

Key Features of *gin.Context:

1. Request Information:

--> c.Request: Access the raw HTTP request (headers, body, etc.).
--> c.Param(): Get URL parameters (like /user/:id).
--> c.DefaultQuery(): Get query string values (e.g., ?name=John).

2. Response Information:

-->c.JSON(): Send a JSON response to the client.
--> c.String(): Send a plain text response.
c.Redirect(): Redirect the client to a different URL.

3. Error Handling:

--> c.Error(): Attach errors to the context, which can be later accessed by middleware or handlers.

4. Middleware Communication:

c.Next(): Passes the context to the next handler or middleware in the chain.

>> In the context of Gin, middleware functions sit between the incoming request and the final request handler.
 Middleware is used to perform tasks like logging, security checks, request modification, response modification, and more.

>> The `binding:"required"` tag indicates that the field in the struct is mandatory and must be provided.







